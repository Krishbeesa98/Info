curl -X POST https://login.salesforce.com/services/oauth2/token \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "grant_type=password" \
  -d "client_id=YOUR_CLIENT_ID" \
  -d "client_secret=YOUR_CLIENT_SECRET" \
  -d "username=YOUR_SALESFORCE_USERNAME" \
  -d "password=YOUR_SALESFORCE_PASSWORD_AND_SECURITY_TOKEN"


#!/bin/bash

# Specify the path to the flow.xml file
FLOW_XML_PATH="path/to/flow.xml"

# Use xmllint to parse the XML and extract processor names and concurrent task count
xmllint --xpath '//processor/name/text() | //processor/scheduling[@concurrentTasks]/@concurrentTasks' "$FLOW_XML_PATH" 2>/dev/null |
awk 'NR%2{printf "%s ", $0; next;}1' |
while read -r line; do
  # Split the output into processor name and concurrent tasks
  processor_name=$(echo "$line" | awk '{print $1}')
  concurrent_tasks=$(echo "$line" | awk '{print $2}')

  # Display the processor name and the number of concurrent tasks
  echo "Processor: $processor_name, Concurrent Tasks: $concurrent_tasks"
done |
sort -k3 -n -r # Sort the results by concurrent tasks in descending order



java.arg.15=--add-exports=java.base/sun.nio.ch=ALL-UNNAMED
java.arg.16=--add-opens=java.base/sun.nio.ch=ALL-UNNAMED








import com.itextpdf.html2pdf.HtmlConverter
import org.apache.nifi.processor.io.StreamCallback

class PdfStreamCallback implements StreamCallback {
    private final String htmlContent

    PdfStreamCallback(String htmlContent) {
        this.htmlContent = htmlContent
    }

    @Override
    void process(InputStream inputStream, OutputStream outputStream) throws IOException {
        HtmlConverter.convertToPdf(htmlContent, outputStream)
    }
}

// Get the flow file and read the HTML content
flowFile = session.get()
if (flowFile != null) {
    // Read HTML content from the flow file
    String htmlContent = new String(session.read(flowFile).bytes, "UTF-8")

    // Create a PDF stream callback
    PdfStreamCallback pdfStreamCallback = new PdfStreamCallback(htmlContent)

    // Create a new flow file for the PDF
    flowFile = session.write(flowFile, pdfStreamCallback)

    // Update the filename and MIME type
    flowFile = session.putAttribute(flowFile, "filename", flowFile.getAttribute("filename").replace(".html", ".pdf"))
    flowFile = session.putAttribute(flowFile, "mime.type", "application/pdf")

    // Transfer the flow file to the success relationship
    session.transfer(flowFile, REL_SUCCESS)
}





import pdfkit
from org.apache.nifi.processor.io import StreamCallback
from java.nio.charset import StandardCharsets

class PyStreamCallback(StreamCallback):
    def __init__(self):
        pass

    def process(self, inputStream, outputStream):
        # Read incoming HTML content
        html_content = IOUtils.toString(inputStream, StandardCharsets.UTF_8)

        # Convert HTML to PDF
        pdf = pdfkit.from_string(html_content, False)

        # Write PDF to outputStream
        outputStream.write(pdf)

flowFile = session.get()
if flowFile is not None:
    flowFile = session.write(flowFile, PyStreamCallback())
    session.transfer(flowFile, REL_SUCCESS)
